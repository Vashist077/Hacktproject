{"ast":null,"code":"// API helper functions for SubGuard application\n\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\n\n// Helper function to make API requests\nconst apiRequest = async (endpoint, options = {}) => {\n  const url = `${API_BASE_URL}${endpoint}`;\n  const token = localStorage.getItem('token');\n  const defaultOptions = {\n    headers: {\n      'Content-Type': 'application/json',\n      ...(token && {\n        Authorization: `Bearer ${token}`\n      })\n    }\n  };\n  const config = {\n    ...defaultOptions,\n    ...options,\n    headers: {\n      ...defaultOptions.headers,\n      ...options.headers\n    }\n  };\n  try {\n    const response = await fetch(url, config);\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('API request failed:', error);\n    throw error;\n  }\n};\n\n// Generic HTTP helpers\nconst buildQueryString = (params = {}) => {\n  const entries = Object.entries(params).filter(([, v]) => v !== undefined && v !== null && v !== '');\n  if (entries.length === 0) return '';\n  const qs = new URLSearchParams(entries).toString();\n  return `?${qs}`;\n};\nexport const http = {\n  get: async (endpoint, query) => {\n    const qs = buildQueryString(query);\n    return apiRequest(`${endpoint}${qs}`, {\n      method: 'GET'\n    });\n  },\n  post: async (endpoint, body, options = {}) => {\n    return apiRequest(endpoint, {\n      method: 'POST',\n      body: JSON.stringify(body || {}),\n      ...options\n    });\n  },\n  put: async (endpoint, body, options = {}) => {\n    return apiRequest(endpoint, {\n      method: 'PUT',\n      body: JSON.stringify(body || {}),\n      ...options\n    });\n  },\n  delete: async (endpoint, options = {}) => {\n    return apiRequest(endpoint, {\n      method: 'DELETE',\n      ...options\n    });\n  }\n};\n\n// Authentication API\nexport const authAPI = {\n  login: (email, password) => apiRequest('/auth/login', {\n    method: 'POST',\n    body: JSON.stringify({\n      email,\n      password\n    })\n  }),\n  register: userData => apiRequest('/auth/register', {\n    method: 'POST',\n    body: JSON.stringify(userData)\n  }),\n  logout: () => apiRequest('/auth/logout', {\n    method: 'POST'\n  }),\n  forgotPassword: email => apiRequest('/auth/forgot-password', {\n    method: 'POST',\n    body: JSON.stringify({\n      email\n    })\n  }),\n  resetPassword: (token, password) => apiRequest('/auth/reset-password', {\n    method: 'POST',\n    body: JSON.stringify({\n      token,\n      password\n    })\n  })\n};\n\n// User API\nexport const userAPI = {\n  getProfile: () => apiRequest('/user/profile'),\n  updateProfile: userData => apiRequest('/user/profile', {\n    method: 'PUT',\n    body: JSON.stringify(userData)\n  }),\n  deleteAccount: () => apiRequest('/user/account', {\n    method: 'DELETE'\n  })\n};\n\n// Subscriptions API\nexport const subscriptionsAPI = {\n  getAll: () => apiRequest('/subscriptions'),\n  getById: id => apiRequest(`/subscriptions/${id}`),\n  create: subscriptionData => apiRequest('/subscriptions', {\n    method: 'POST',\n    body: JSON.stringify(subscriptionData)\n  }),\n  update: (id, subscriptionData) => apiRequest(`/subscriptions/${id}`, {\n    method: 'PUT',\n    body: JSON.stringify(subscriptionData)\n  }),\n  delete: id => apiRequest(`/subscriptions/${id}`, {\n    method: 'DELETE'\n  }),\n  pause: id => apiRequest(`/subscriptions/${id}/pause`, {\n    method: 'POST'\n  }),\n  cancel: id => apiRequest(`/subscriptions/${id}/cancel`, {\n    method: 'POST'\n  }),\n  uploadCSV: file => {\n    const formData = new FormData();\n    formData.append('file', file);\n    return apiRequest('/subscriptions/upload-csv', {\n      method: 'POST',\n      headers: {\n        // Don't set Content-Type, let browser set it with boundary\n        Authorization: `Bearer ${localStorage.getItem('token')}`\n      },\n      body: formData\n    });\n  }\n};\n\n// Alerts API\nexport const alertsAPI = {\n  getAll: () => apiRequest('/alerts'),\n  getById: id => apiRequest(`/alerts/${id}`),\n  resolve: id => apiRequest(`/alerts/${id}/resolve`, {\n    method: 'POST'\n  }),\n  ignore: id => apiRequest(`/alerts/${id}/ignore`, {\n    method: 'POST'\n  }),\n  investigate: id => apiRequest(`/alerts/${id}/investigate`, {\n    method: 'POST'\n  }),\n  markAllAsRead: () => apiRequest('/alerts/mark-all-read', {\n    method: 'POST'\n  })\n};\n\n// Analytics API\nexport const analyticsAPI = {\n  getSpendingOverTime: (timeRange = '6months') => apiRequest(`/analytics/spending?range=${timeRange}`),\n  getCategoryDistribution: () => apiRequest('/analytics/categories'),\n  getFraudDetectionStats: () => apiRequest('/analytics/fraud-detection'),\n  getForecast: () => apiRequest('/analytics/forecast'),\n  getRecommendations: () => apiRequest('/analytics/recommendations'),\n  getTopMerchants: () => apiRequest('/analytics/top-merchants')\n};\n\n// Gmail Integration API\nexport const gmailAPI = {\n  connect: () => apiRequest('/gmail/connect'),\n  disconnect: () => apiRequest('/gmail/disconnect', {\n    method: 'POST'\n  }),\n  getStatus: () => apiRequest('/gmail/status'),\n  syncTransactions: () => apiRequest('/gmail/sync', {\n    method: 'POST'\n  })\n};\n\n// Notifications API\nexport const notificationsAPI = {\n  getSettings: () => apiRequest('/notifications/settings'),\n  updateSettings: settings => apiRequest('/notifications/settings', {\n    method: 'PUT',\n    body: JSON.stringify(settings)\n  }),\n  testNotification: type => apiRequest('/notifications/test', {\n    method: 'POST',\n    body: JSON.stringify({\n      type\n    })\n  })\n};\nexport default {\n  auth: authAPI,\n  user: userAPI,\n  subscriptions: subscriptionsAPI,\n  alerts: alertsAPI,\n  analytics: analyticsAPI,\n  gmail: gmailAPI,\n  notifications: notificationsAPI,\n  http\n};","map":{"version":3,"names":["API_BASE_URL","process","env","REACT_APP_API_URL","apiRequest","endpoint","options","url","token","localStorage","getItem","defaultOptions","headers","Authorization","config","response","fetch","ok","Error","status","json","error","console","buildQueryString","params","entries","Object","filter","v","undefined","length","qs","URLSearchParams","toString","http","get","query","method","post","body","JSON","stringify","put","delete","authAPI","login","email","password","register","userData","logout","forgotPassword","resetPassword","userAPI","getProfile","updateProfile","deleteAccount","subscriptionsAPI","getAll","getById","id","create","subscriptionData","update","pause","cancel","uploadCSV","file","formData","FormData","append","alertsAPI","resolve","ignore","investigate","markAllAsRead","analyticsAPI","getSpendingOverTime","timeRange","getCategoryDistribution","getFraudDetectionStats","getForecast","getRecommendations","getTopMerchants","gmailAPI","connect","disconnect","getStatus","syncTransactions","notificationsAPI","getSettings","updateSettings","settings","testNotification","type","auth","user","subscriptions","alerts","analytics","gmail","notifications"],"sources":["C:/Users/Admin/Desktop/SubGuard/Hacktproject/frontend/src/api.js"],"sourcesContent":["// API helper functions for SubGuard application\r\n\r\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\r\n\r\n// Helper function to make API requests\r\nconst apiRequest = async (endpoint, options = {}) => {\r\n  const url = `${API_BASE_URL}${endpoint}`;\r\n  const token = localStorage.getItem('token');\r\n\r\n  const defaultOptions = {\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n      ...(token && { Authorization: `Bearer ${token}` }),\r\n    },\r\n  };\r\n\r\n  const config = {\r\n    ...defaultOptions,\r\n    ...options,\r\n    headers: {\r\n      ...defaultOptions.headers,\r\n      ...options.headers,\r\n    },\r\n  };\r\n\r\n  try {\r\n    const response = await fetch(url, config);\r\n    \r\n    if (!response.ok) {\r\n      throw new Error(`HTTP error! status: ${response.status}`);\r\n    }\r\n    \r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error('API request failed:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Generic HTTP helpers\r\nconst buildQueryString = (params = {}) => {\r\n  const entries = Object.entries(params).filter(([, v]) => v !== undefined && v !== null && v !== '');\r\n  if (entries.length === 0) return '';\r\n  const qs = new URLSearchParams(entries).toString();\r\n  return `?${qs}`;\r\n};\r\n\r\nexport const http = {\r\n  get: async (endpoint, query) => {\r\n    const qs = buildQueryString(query);\r\n    return apiRequest(`${endpoint}${qs}`, { method: 'GET' });\r\n  },\r\n  post: async (endpoint, body, options = {}) => {\r\n    return apiRequest(endpoint, { method: 'POST', body: JSON.stringify(body || {}), ...options });\r\n  },\r\n  put: async (endpoint, body, options = {}) => {\r\n    return apiRequest(endpoint, { method: 'PUT', body: JSON.stringify(body || {}), ...options });\r\n  },\r\n  delete: async (endpoint, options = {}) => {\r\n    return apiRequest(endpoint, { method: 'DELETE', ...options });\r\n  },\r\n};\r\n\r\n// Authentication API\r\nexport const authAPI = {\r\n  login: (email, password) => \r\n    apiRequest('/auth/login', {\r\n      method: 'POST',\r\n      body: JSON.stringify({ email, password }),\r\n    }),\r\n\r\n  register: (userData) => \r\n    apiRequest('/auth/register', {\r\n      method: 'POST',\r\n      body: JSON.stringify(userData),\r\n    }),\r\n\r\n  logout: () => \r\n    apiRequest('/auth/logout', {\r\n      method: 'POST',\r\n    }),\r\n\r\n  forgotPassword: (email) => \r\n    apiRequest('/auth/forgot-password', {\r\n      method: 'POST',\r\n      body: JSON.stringify({ email }),\r\n    }),\r\n\r\n  resetPassword: (token, password) => \r\n    apiRequest('/auth/reset-password', {\r\n      method: 'POST',\r\n      body: JSON.stringify({ token, password }),\r\n    }),\r\n};\r\n\r\n// User API\r\nexport const userAPI = {\r\n  getProfile: () => apiRequest('/user/profile'),\r\n  \r\n  updateProfile: (userData) => \r\n    apiRequest('/user/profile', {\r\n      method: 'PUT',\r\n      body: JSON.stringify(userData),\r\n    }),\r\n\r\n  deleteAccount: () => \r\n    apiRequest('/user/account', {\r\n      method: 'DELETE',\r\n    }),\r\n};\r\n\r\n// Subscriptions API\r\nexport const subscriptionsAPI = {\r\n  getAll: () => apiRequest('/subscriptions'),\r\n  \r\n  getById: (id) => apiRequest(`/subscriptions/${id}`),\r\n  \r\n  create: (subscriptionData) => \r\n    apiRequest('/subscriptions', {\r\n      method: 'POST',\r\n      body: JSON.stringify(subscriptionData),\r\n    }),\r\n\r\n  update: (id, subscriptionData) => \r\n    apiRequest(`/subscriptions/${id}`, {\r\n      method: 'PUT',\r\n      body: JSON.stringify(subscriptionData),\r\n    }),\r\n\r\n  delete: (id) => \r\n    apiRequest(`/subscriptions/${id}`, {\r\n      method: 'DELETE',\r\n    }),\r\n\r\n  pause: (id) => \r\n    apiRequest(`/subscriptions/${id}/pause`, {\r\n      method: 'POST',\r\n    }),\r\n\r\n  cancel: (id) => \r\n    apiRequest(`/subscriptions/${id}/cancel`, {\r\n      method: 'POST',\r\n    }),\r\n\r\n  uploadCSV: (file) => {\r\n    const formData = new FormData();\r\n    formData.append('file', file);\r\n    \r\n    return apiRequest('/subscriptions/upload-csv', {\r\n      method: 'POST',\r\n      headers: {\r\n        // Don't set Content-Type, let browser set it with boundary\r\n        Authorization: `Bearer ${localStorage.getItem('token')}`,\r\n      },\r\n      body: formData,\r\n    });\r\n  },\r\n};\r\n\r\n// Alerts API\r\nexport const alertsAPI = {\r\n  getAll: () => apiRequest('/alerts'),\r\n  \r\n  getById: (id) => apiRequest(`/alerts/${id}`),\r\n  \r\n  resolve: (id) => \r\n    apiRequest(`/alerts/${id}/resolve`, {\r\n      method: 'POST',\r\n    }),\r\n\r\n  ignore: (id) => \r\n    apiRequest(`/alerts/${id}/ignore`, {\r\n      method: 'POST',\r\n    }),\r\n\r\n  investigate: (id) => \r\n    apiRequest(`/alerts/${id}/investigate`, {\r\n      method: 'POST',\r\n    }),\r\n\r\n  markAllAsRead: () => \r\n    apiRequest('/alerts/mark-all-read', {\r\n      method: 'POST',\r\n    }),\r\n};\r\n\r\n// Analytics API\r\nexport const analyticsAPI = {\r\n  getSpendingOverTime: (timeRange = '6months') => \r\n    apiRequest(`/analytics/spending?range=${timeRange}`),\r\n  \r\n  getCategoryDistribution: () => apiRequest('/analytics/categories'),\r\n  \r\n  getFraudDetectionStats: () => apiRequest('/analytics/fraud-detection'),\r\n  \r\n  getForecast: () => apiRequest('/analytics/forecast'),\r\n  \r\n  getRecommendations: () => apiRequest('/analytics/recommendations'),\r\n  \r\n  getTopMerchants: () => apiRequest('/analytics/top-merchants'),\r\n};\r\n\r\n// Gmail Integration API\r\nexport const gmailAPI = {\r\n  connect: () => apiRequest('/gmail/connect'),\r\n  \r\n  disconnect: () => \r\n    apiRequest('/gmail/disconnect', {\r\n      method: 'POST',\r\n    }),\r\n\r\n  getStatus: () => apiRequest('/gmail/status'),\r\n  \r\n  syncTransactions: () => \r\n    apiRequest('/gmail/sync', {\r\n      method: 'POST',\r\n    }),\r\n};\r\n\r\n// Notifications API\r\nexport const notificationsAPI = {\r\n  getSettings: () => apiRequest('/notifications/settings'),\r\n  \r\n  updateSettings: (settings) => \r\n    apiRequest('/notifications/settings', {\r\n      method: 'PUT',\r\n      body: JSON.stringify(settings),\r\n    }),\r\n\r\n  testNotification: (type) => \r\n    apiRequest('/notifications/test', {\r\n      method: 'POST',\r\n      body: JSON.stringify({ type }),\r\n    }),\r\n};\r\n\r\nexport default {\r\n  auth: authAPI,\r\n  user: userAPI,\r\n  subscriptions: subscriptionsAPI,\r\n  alerts: alertsAPI,\r\n  analytics: analyticsAPI,\r\n  gmail: gmailAPI,\r\n  notifications: notificationsAPI,\r\n  http,\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}